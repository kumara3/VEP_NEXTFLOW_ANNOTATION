
//define user id 
def userid = "whoami".execute().text.trim()

params {
    //inputvcf = '/absolute/path/to/default/input.vcf'
    species = "homo_sapiens"
	assembly = "GRCh38"
	bind_path = "/scratch/s163196/reference/Homo_sapiens_vep/bind.txt"
    cpu = 1
	//vep_cache = "/path/to/cache/vep_cache"
	//vep_flags = "--variant_class --sift b --polyphen b --nearest gene --gene_phenotype --ccds --uniprot --hgvs --symbol --numbers --domains --regulatory --canonical --protein --biotype --af_1kg --af_gnomade --af_gnomadg --pubmed --shift_hgvs 0 --allele_number --buffer_size 10000"
    // LoFtee flags loftee_path, gerp_bigwig, human_ancestor_fa, and conservation_file are set automatically.
	// If you need to modify other LoFtee flags, then fill-in the additional comma-separated options with a leading comma below.
	// e.g.loftee_flags = ",get_splice_features:1,max_scan_distance:15"
	loftee_flags = ""
	enable_summary = false
	drop_genotypes = "" // set to "-G" if you want to drop the genotypes in the output files (recommended), or leave blank "" if not.
	outdir = 'report_logs/'
	// vep parameters
	manifest {
    author = "ashwani kumar"
    version = "vep version 114"
}
}

apptainer {
	enabled = true
	autoMounts = true
	runOptions = '--bind /scratch/:/scartch/'
}

// singularity {
// 	enabled = true
// 	autoMounts = true
// 	runOptions = '--bind /scratch/:/scartch/'

// }
//def user = System.properties['user.name']
process {
	withLabel: vep {
		container = "/home/s163196/vep_data/ensembl-vep_latest.sif" // Specify path to the VEP singularity image
		
	}
 	withLabel: action_vcf {
 		container = "/home/s163196/vep_data/bcftools_1.13--h3a49de5_0.sif" // Must be always empty string
 	}
    withLabel: split {

        container = "/home/s163196/vep_data/tabix_v1.9-11-deb_cv1.sif" // tabix container
    }
        //executor = "local"
	executor = "slurm"
    // uncomment the line below if you want to specify additional options e.g. account name
	//clusterOptions = "--account=XYZ"
	cpus = 2
    time = "8h"
    memory = "16GB"
}

executor {
        $slurm {
                queueSize = 500
                jobName = { "annotation" }
        }
        $local {
                cpus = 1
        }
}
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}
